//Creating the Lead classmodel.Lead = new DataClass("Leads");//Add Lead attributes.model.Lead.ID = new Attribute("storage", "long", "key auto");model.Lead.firstName = new Attribute("storage", "string");model.Lead.lastName = new Attribute("storage", "string", "btree");model.Lead.title = new Attribute("storage", "string");model.Lead.phone = new Attribute("storage", "string", "btree");model.Lead.fax = new Attribute("storage", "string");model.Lead.mobile = new Attribute("storage", "string", "btree");model.Lead.emailAccnt = new Attribute("storage", "string", "btree");model.Lead.street = new Attribute("storage", "string");model.Lead.city = new Attribute("storage", "string", "btree");model.Lead.state = new Attribute("storage", "string", "btree");model.Lead.zip = new Attribute("storage", "string");model.Lead.country = new Attribute("storage", "string", "btree");model.Lead.company = new Attribute("storage", "string", "btree");model.Lead.converted = new Attribute("storage", "bool", "cluster");model.Lead.convertedDate = new Attribute("storage", "date");model.Lead.fullName = new Attribute("calculated", "string");model.Lead.owner = new Attribute("relatedEntity", "User", "User"); // relation to the User classmodel.Lead.convertedContact = new Attribute("relatedEntity", "Contact", "Contact"); // relation to the Contact classmodel.Lead.convertedAcct = new Attribute("relatedEntity", "Account", "Account"); // relation to the Account classmodel.Lead.activityCollection = new Attribute("relatedEntities", "Activity", "lead", {reversePath:true});model.Lead.noteCollection = new Attribute("relatedEntities", "Note", "lead", {reversePath:true});//Calculated Attributes.model.Lead.fullName.onGet = function() {	return this.firstName + " " + this.lastName; };//Entity methods.model.Lead.entityMethods = {};model.Lead.entityMethods.convertLead = function(){	var recentItemArr = [];		this.convertedDate = new Date();	this.converted = true;		var newAccount = new ds.Account({		name: this.company,		owner: this.owner	});	newAccount.save();		var newContact = new ds.Contact({		firstName: this.firstName,		lastName: this.lastName,		owner: this.owner	});	newContact.save();		this.convertedContact = newContact;	this.convertedAcct = newAccount;	this.save();		//Update Recent Items	var theRecentItem = ds.RecentItem.find("entityKey = :1 && dataClassName = :2", this.ID, "leads");	if (theRecentItem != null) {		theRecentItem.dataClassName = "contacts";		theRecentItem.entityKey = newContact.ID;		theRecentItem.title = "Contact: " + newContact.firstName + " " + newContact.lastName;		theRecentItem.save();				var recentItemsCollection = ds.RecentItem.query("ID > 0 order by sortOrder asc");		recentItemArr = recentItemsCollection.toArray("dataClassName, entityKey, title, sortOrder");	}	return {contactID: newContact.ID, recentItemArray: recentItemArr};};model.Lead.entityMethods.convertLead.scope ="public";//Eventsmodel.Lead.events = {};/**/model.Lead.events.onValidate = function() {		var err;	/*	if (this.owner !== null  && this.firstName === null) {		err = {error: 8080, errorMessage: "You must enter a first name."};	}	*/	return err;};model.Lead.events.onInit = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		myUser = ds.User.find("ID = :1", myCurrentUser.ID);			if ((myCurrentUser !== null) && (myUser !== null)) {//if a user is logged in.				this.owner = myUser;	}		this.converted = false;}; //end - onInit().model.Lead.events.onRestrictingQuery = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		sessionRef = currentSession(), // Get session.		result;			result = ds.Lead.createEntityCollection(); //default to empty collection.		if (sessionRef.belongsTo("Administrator")) {		result = ds.Lead.all();	} else {		result = ds.Lead.query("owner.ID = :1", myCurrentUser.ID);	}		return result;} //end - onRestrictingQuery();